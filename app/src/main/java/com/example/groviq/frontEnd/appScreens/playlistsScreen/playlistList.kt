package com.example.groviq.frontEnd.appScreens.playlistsScreen

import android.net.Uri
import androidx.annotation.OptIn
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.rounded.Delete
import androidx.compose.material.icons.rounded.DriveFileRenameOutline
import androidx.compose.material.icons.rounded.Edit
import androidx.compose.material.icons.rounded.MoreVert
import androidx.compose.material.icons.rounded.PlaylistPlay
import androidx.compose.material3.Button
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.media3.common.util.UnstableApi
import androidx.navigation.NavHostController
import com.example.groviq.AppViewModels
import com.example.groviq.backEnd.dataStructures.PlayerViewModel
import com.example.groviq.frontEnd.Screen
import com.example.groviq.frontEnd.bottomBars.createPlaylistBar
import com.example.groviq.frontEnd.bottomBars.isCreatePlaylistOpened
import com.example.groviq.frontEnd.bottomBars.isRenamePlaylistOpened
import com.example.groviq.frontEnd.bottomBars.originalPlaylistName
import com.example.groviq.frontEnd.drawPlaylistCover
import com.example.groviq.frontEnd.grooviqUI
import com.example.groviq.frontEnd.subscribeMe
import com.example.groviq.ui.theme.SfProDisplay

@OptIn(
    UnstableApi::class
)
@Composable
fun playlistList(mainViewModel : PlayerViewModel, playlistNavigationLocal: NavHostController)
{

    val audioData               by mainViewModel.uiState.subscribeMe { it.audioData }
    val allAudioData            by mainViewModel.uiState.subscribeMe { it.allAudioData }

    val audioSources = audioData.entries
    val playlists    = mainViewModel.getPlaylists().entries.filter { audioData[it.key]?.autoGenerated?.not() ?: true }

    Column()
    {
        val listState = rememberLazyListState()

        Column(Modifier.padding(5.dp))
        {
            Text(
                "Плейлисты : ", fontFamily = SfProDisplay
            )

            Button(onClick = {
                isCreatePlaylistOpened.value = true
            }, Modifier.fillMaxWidth()){
                Text("Создать плейлист")
            }

            LazyColumn(
                state = listState,
                modifier = Modifier.fillMaxWidth()
            ) {
                items(
                    playlists
                ) { result ->

                    Row()
                    {
                        Row(
                            Modifier.weight(1f).clickable
                            {
                                val encoded =
                                    Uri.encode(
                                        result.key
                                    )
                                playlistNavigationLocal.navigate(
                                    "${Screen.Playlists.route}/playlist/" + encoded
                                )

                            })
                        {

                            Box(Modifier.size(60.dp))
                            {
                                grooviqUI.elements.albumCoverPresenter.drawPlaylistCover(
                                    result.key,
                                    audioData    = audioData,
                                    allAudioData = allAudioData
                                )
                            }

                            Text(
                                result.key
                            )
                        }

                        Column()
                        {
                            IconButton(
                                onClick = {
                                    originalPlaylistName.value   = result.key
                                    isRenamePlaylistOpened.value = true
                                }
                            ) {
                                Icon(Icons.Rounded.Edit, "")
                            }

                        }


                    }


                }
            }
        }
    }

    createPlaylistBar(mainViewModel)
}