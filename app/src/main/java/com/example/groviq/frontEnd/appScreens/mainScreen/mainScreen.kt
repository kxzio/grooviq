package com.example.groviq.frontEnd.appScreens.mainScreen

import android.net.Uri
import androidx.annotation.OptIn
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.rounded.PlaylistPlay
import androidx.compose.material3.Button
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.runtime.snapshotFlow
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.media3.common.util.UnstableApi
import androidx.navigation.NavHostController
import com.example.groviq.AppViewModels
import com.example.groviq.backEnd.dataStructures.PlayerViewModel
import com.example.groviq.frontEnd.Screen
import com.example.groviq.frontEnd.bottomBars.isCreatePlaylistOpened
import kotlinx.coroutines.flow.filter

@Composable
@OptIn(
    UnstableApi::class
)
fun mainScreen(mainViewModel : PlayerViewModel, playlistNavigationLocal: NavHostController)
{
    val mainUiState     by mainViewModel.uiState.collectAsState()

    val playlistsAutoGenerated = remember(mainUiState.audioData) {
        mainUiState.audioData.entries.filter { it.value.autoGenerated }
    }

    Column()
    {
        val listState = rememberLazyListState()

        Column(
            Modifier.padding(5.dp))
        {
            Text(
                "Главная"
            )

            LazyColumn(
                state = listState,
                modifier = Modifier.fillMaxWidth()
            ) {
                items(playlistsAutoGenerated) { result ->

                    Row(
                        Modifier.clickable
                        {
                            val encoded =
                                Uri.encode(
                                    result.key
                                )
                            playlistNavigationLocal.navigate(
                                "${Screen.Home.route}/playlist/" + encoded
                            )

                        })
                    {
                        Icon(
                            Icons.Rounded.PlaylistPlay, "", Modifier.size(55.dp))

                        Text(
                            mainUiState.audioData[result.key]?.nameOfAudioSource ?: "Неизвестный плейлист"
                        )
                    }

                }
            }
        }
    }
}